name: Build and Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build App
        run: npm run build -- --verbose
        env:
          DEBUG: "electron-builder,electron-builder:*"

      - name: Package Electron App
        run: |
          # Ensure dist directory exists
          mkdir -p dist
          
          # Debug information
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Directory listing:"
          ls -la
          
          # Package for current platform only with verbose logging
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "Packaging for Windows..."
            npm run package -- --win --publish never
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "Packaging for macOS..."
            npm run package -- --mac --publish never
          else
            echo "Packaging for Linux..."
            npm run package -- --linux --publish never
          fi
          
          # Check if packaging was successful
          if [ $? -ne 0 ]; then
            echo "Packaging failed. Attempting to continue..."
          else
            echo "Packaging completed successfully."
          fi
          
          # List generated artifacts
          echo "Generated artifacts:"
          find dist -type f | sort
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: "electron-builder,electron-builder:*"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deltavision-${{ matrix.platform }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.AppImage
            dist/**/*.deb
            dist/**/*.rpm
          if-no-files-found: warn

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Debug Release Context
        run: |
          echo "Tag: $GITHUB_REF"
          echo "Listing artifacts directory:"
          find artifacts -type f | sort
          echo "GitHub token permissions:"
          echo "GITHUB_TOKEN has contents:write permission"

      - name: Get Version from Tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Create a temporary changelog file
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            git log --pretty=format:"- %s (%h)" >> changelog.md
          fi
          
          # Set a simple output without multiline
          echo "changelog_file=changelog.md" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: DeltaVision v${{ steps.get_version.outputs.VERSION }}
          body: |
            # DeltaVision v${{ steps.get_version.outputs.VERSION }}
            
            $(cat ${{ steps.changelog.outputs.changelog_file }})
            
            ## Installation
            
            ### Windows
            Download and run the .exe installer
            
            ### macOS
            Download the .dmg file, open it, and drag DeltaVision to your Applications folder
            
            ### Linux
            Download the .AppImage file, make it executable (`chmod +x *.AppImage`), and run it
            
            ## Offline Installation
            For offline environments, download all installers and follow the [offline installation instructions](https://github.com/Journey-West/DeltaVision#offline-installation)
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and publish offline package
  offline-package:
    name: Create Offline Package
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: offline-package

      - name: Create Offline Package
        run: |
          mkdir -p DeltaVision-Offline-Package
          
          # List all downloaded artifacts for debugging
          echo "Downloaded artifacts:"
          find offline-package -type f | sort
          
          # Copy all artifacts to the offline package directory
          find offline-package -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | xargs -I{} cp {} DeltaVision-Offline-Package/ 2>/dev/null || echo "No artifacts found to copy"
          
          # Create README file
          cat > DeltaVision-Offline-Package/README.txt << EOL
          DeltaVision Offline Installation
          ================================
          
          This package contains standalone installers for DeltaVision that can be used in offline environments.
          
          Installation Instructions:
          -------------------------
          
          Windows:
          1. Double-click the .exe installer file
          2. Follow the installation prompts
          3. Launch DeltaVision from the Start Menu
          
          macOS:
          1. Double-click the .dmg file
          2. Drag DeltaVision to the Applications folder
          3. Launch DeltaVision from the Applications folder
          
          Linux:
          - For Debian/Ubuntu: sudo dpkg -i deltavision_*.deb
          - For Red Hat/Fedora: sudo rpm -i deltavision_*.rpm
          - AppImage: Make the .AppImage file executable (chmod +x *.AppImage) and then run it
          
          For more information, visit: https://github.com/Journey-West/DeltaVision
          EOL
          
          # List contents of the offline package directory
          echo "Offline package contents:"
          ls -la DeltaVision-Offline-Package/
          
          # Create zip archive only if there are files to package
          if [ "$(ls -A DeltaVision-Offline-Package/)" ]; then
            zip -r DeltaVision-Offline-Package.zip DeltaVision-Offline-Package
            echo "Created offline package zip file"
          else
            echo "No files to package, creating empty zip file for workflow to continue"
            echo "This is a placeholder. No artifacts were found." > DeltaVision-Offline-Package/README-ERROR.txt
            zip -r DeltaVision-Offline-Package.zip DeltaVision-Offline-Package
          fi

      - name: Upload Offline Package
        uses: actions/upload-artifact@v4
        with:
          name: DeltaVision-Offline-Package
          path: DeltaVision-Offline-Package.zip
          if-no-files-found: warn

      - name: Get Version from Tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Attach Offline Package to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          files: DeltaVision-Offline-Package.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
